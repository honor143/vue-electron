<template>
  <div id="bond-tend">
      <!--tags-->
      <!--<div class="tag">
        <div class="tagChildren"><Button type="primary" size="small" @click="preTag" icon="ios-arrow-back"></Button></div>
        <div class="tag-wrapper clearfix" ref="tagWrapper">
            <div ref="tags" class="tag-content clearfix">
                <Tag class="my-tag"  v-for="item in issueInfoList" @click.native="tagClick(item.id)" :key="item.id" :name="item.vcTypeName">{{item.vcTypeName}}</Tag>
            </div>
        </div>
        <div class="tagChildren"><Button type="primary" size="small" @click="nextTag" icon="ios-arrow-forward"></Button></div>
      </div>-->
      <div class="tag-wrapper">
            <BondTag v-if="issueInfoList.length > 0" @clickTag="tagClick" :issueInfos="issueInfoList"></BondTag>
      </div>
    
      <!--债券信息-->
       <Layout class="in-content-layout">
            <Content>
                <BondLowDetail :issueInfo="issueInfo" :vcBidTarget="vcBidTarget" :cBidPrice="cBidPrice"></BondLowDetail>
                <Row>
                    <Col span="24">
                        <span class="label-text">账户类型:</span>
                        <Select v-model="model1" size="small" style="width:100px" @on-change="selectInstructionList">
                            <Option v-for="item in accountTypeList" :value="item.value" :key="item.value">{{ item.label }}</Option>
                        </Select>
                        <ButtonGroup>
                            <Button size="small" type="primary" v-if="userButtonRoles.saveLinkOrder_8_6" @click="filedSettingModel = true">定制列</Button>
                            <Button size="small" type="primary">导入</Button>
                            <Button size="small" type="primary" @click="editAcountHandle">修改账户</Button>
                            <Button size="small" @click="deleteHandle" v-if="userButtonRoles.deleteInstructions_8_7" type="primary">删除</Button>
                        </ButtonGroup>
                        <ButtonGroup>
                            <Button size="small" type="primary">试算风险</Button>
                            <Button size="small" @click="submitHandle" v-if="userButtonRoles.submitSecondary_8_3" type="primary">提交</Button>
                        </ButtonGroup>
                    </Col>
                </Row>
                <div class="table-wrapper" ref="tableWrap">
                    <Table stripe highlight-row @on-current-change="insRowChange" @on-selection-change="selectChange" :loading="tableLoading" :height="returnTableHeight" :columns="columns" :data="InstructionData"></Table>
                </div>
                <Page size="small" :total="totalSize" :current="pageNum" @on-page-size-change="pageSizeChange" @on-change="pageNumChange" :page-size="pageSize" :page-size-opts="pageOpts" show-total show-elevator show-sizer></Page>
                <!--<div @click="collapsedSider" class="show-hide-side-bt">
                     <Icon :class="rotateIcon" type="ios-play" />
                </div>-->
            </Content>
            <Sider ref="sider" width="370" hide-trigger class="sider" :collapsed-width="0" collapsible v-model="isCollapsed">
                 <!-- <BondDetail v-if="!isCollapsed" ref="detailTab" :vcCode="selectTag" :bondDetail="bondDetail"></BondDetail> -->
                <row>
                    <Col span="24">
                        <div class="sec-header">
                            <h3>流程状态</h3>
                        </div>
                    </Col>
                    <!--<Col span="4">
                        <Button @click="showProcessDetail" v-if="userButtonRoles.selectBpmnHtml_7_18" size="small" type="text">详细</Button>
                    </Col>-->
                </row>
                <!-- v-show="!isCollapsed" -->
                <div class="process-table-wrapper" ref="processTableWrap">
                    <Table stripe highlight-row :height="processTableHeight" :loading="processTableLoading" :columns="processColumns" :data="processData"></Table>
                </div> 
                <!--<Table stripe highlight-row :height="processTableHeight" :columns="Columns" :data="bitData"></Table>-->
                <div @click="collapsedSider" class="show-hide-side">
                     <Icon :class="rotateIcon" type="ios-play" />
                </div>
                
            </Sider>
        </Layout>
        
        <Modal v-model="editAccountModel" @on-ok="editAccountOk" :loading="editAcountLoading" width="1000" title="修改账户">
            <EditAccount v-if="editAccountModel" @submitsuc="submitSucess" @submiterror="submitError" ref="editAccount" :bondInfo="bondInfo">
            </EditAccount>
        </Modal>   
         <Modal v-model="filedSettingModel" width="333" draggable footer-hide scrollable title="定制列">
            <FieldSetting ref="setField" @fieldsetsuc="filedModelRes" @setcancel="setCancel" 
                :lIssueCnt="lIssueCnt" :vcCode="selectTag" v-if="filedSettingModel" :pageId="pageId" :lTableId="1"  :columns="columns">
            </FieldSetting>
        </Modal>
        <Refresh @refresh="refresh"></Refresh> 
    </div>
</template>


  

<script>
import FieldSetting from './BondTendInstruc/FieldSetting'
import BondLowDetail from './BondTendInstruc/BondLowDetail'
import BondTag from './BondTendInstruc/BondTag'
import BondDetail from './module/BondDetail'
import EditAccount from './module/EditAccount'
import Refresh from '../Refresh.vue'
import {selectUserAuth} from '../../Api/common.js'
const {ipcRenderer} = require('electron')


const RenderIsLock = (h, params) => {
        const row = params.row;
        return h('i', {
            'class':{
                iconfont:true,
                'icon-suo':row.cIsLocked == 1,
                'icon-suo1':row.cIsLocked != 1
            },
            style:{
                color:row.cIsLocked == 1 ? '#EE8400' : 'green',
                fontSize:'16px'
            }
        });
    }
const RenderWarnLevel =  (h, params) => {
        const row = params.row;
        const color = row.cWarnLevel == 1 ?'#19be6b' : '#ed4014';
        const type= row.cWarnLevel == 1 ?'ios-checkmark-circle':'ios-warning'
        if(!row.cWarnLevel){
             return h('span', {}, "未合规");
        }else{
             return h('Icon', {
                props: {
                    type: type,
                    color: color,
                    size: 18
                }
            });
        }
       
    }
  export default {
    name:'page_8',
    data () {
        return {
            bondInfo:null,
            // 页面Id
            pageId:null,
             //分页数据
            pageSize:30,
            totalSize:null,
            pageNum:1,
            pageOpts:[30,40,50],
            tableLoading:false,
            // 字段设置弹出框
            filedSettingModel:false,
            tableHeight:200,
            accountTypeList: [],
            model1: '',
            //债券发行信息列表
            issueInfoList: [],
            // 选中的债券信息Tag
            selectTag:'',
            vcBidTarget:'', //标位类型
            //选中债券的轮数
            lAddCount:0,
            cBidPrice:null,
            // 发行次序
            lIssueCnt:null,
            // 债券发行信息详情
            issueInfo:{},
            //指令表表格多选选中的状态
            selectInstruc:[],
            // 该数组中只有lCombiId 和 id
            newSelectArr:[],
            columns:[
                 {
                    type: 'selection',
                    width: 40,
                    align: 'left',
                    fixed: 'left'
                }
            ],
            InstructionData:[],
            bitColumns:[
                {
                    title:'序号',
                    type: 'index',
                    width: 60,
                    align: 'left'
                },
                {
                    title: '标位',
                    key: 'enBidPrice'
                },
                {
                    title: '自动分配量',
                    key: 'enBidAmount',
                    width:75
                },
                {
                    title: '调整量',
                    key: 'enBidAmountModify'
                }
                // {
                //     title: ' ',
                //     width:30,
                //      render: (h, params) => {
                //         console.log(params)
                //             const row = params.row;
                //             const color = '#ed4014';
                //             const type= 'md-close-circle'
                //             if(this.bitRowIndex == params.index){
                //                 return h('Icon', {
                //                     props: {
                //                         type: type,
                //                         color: color,
                //                         size: 18
                //                     }
                //                 });
                //             }
                           
                            
                //         }
                // }
            ],
            bitRowIndex:null,
            instrucId:null,
           /*  bitData:[
                {
                    bit:'3.2%',
                    auto:'200万',
                    count:'200万',
                    edit:true
                }   
                 
            ], */
            processTableHeight:300,
            processColumns:[
                 {
                    title: '流程节点',
                    key: 'actName'
                },
                 {
                    title: '人员',
                    key: 'vcDisplayname'
                },
                 {
                    title: '状态',
                    key: 'vcStartName',
                    /* render: (h, params) => {
                        console.log(params)
                        const row = params.row;
                        const color = '#ed4014';
                        // const type= 'md-close-circle'
                        if(row.lStart == '2'){
                            return h('span',row.lStart, {
                                style: {
                                    color: '#ed4014'
                                }
                            });
                        }else{
                            return h('span',row.lStart,
                            {
                               style: {
                                    color: 'green'
                                } 
                            });
                        }
                    } */
                },
                 {
                    title: '时间',
                    key: 'startTime'
                },
            ],
            editAccountModel:false,
            processData:[],
            processTableLoading:false,
            isCollapsed:true,
            tagIndex:0,
            prex:0,
            bondDetail:{},
            userButtonRoles:{
                submitSecondary_8_3:false,//提交流程(提交按钮)
                saveLinkOrder_8_6:false,//确认中标(确认中标按钮)
                deleteInstructions_8_7:false, //删除按钮
            },
            editAcountLoading:true
        }
        
    },
    beforeRouteEnter (to, from, next) {
        next(vm => {
            // 在路由跳转之前获取pageId
            // vm.pageId = to.query.pageId;
            var SelectUserAuth =  selectUserAuth.bind(vm);
            SelectUserAuth();
        })
    },
    created(){
        this.pageId = this.$route.meta.id;
        this.selectIssueInfo();
        this.selectdicFundList();
    },
    computed: {
            //返回table的动态高度
            returnTableHeight () {
               return this.tableHeight;
            },
            rotateIcon () {
                return this.isCollapsed ? 'hide-side' : 'show-side';
            }
        },
    methods:{
         // 组件数据刷新
        refresh(){
            selectUserAuth.bind(this)();
            this.selectIssueInfo();
            this.selectdicFundList();
        },
        //查询账户大类
        selectdicFundList(){
            this.$httpGet(`/bondBid/selecDicFundType`)
                .then((res) => {            
                    if(res.status===200 && res.data){ 
                        this.accountTypeList = [];                      
                        for(let i=0;i<res.data.length;i++){
                            let obj={};
                            obj.label=res.data[i];
                            obj.value=res.data[i];
                            this.accountTypeList.push(obj);
                        }
                        
                    }                
                })
        },
        // 点击切换选中的债券
        tagClick(item){
            // console.log(item)
            this.selectTag = item.id;
            this.lIssueCnt = item.lIssueCnt;
            this.lAddCount = item.lAddCount;
            this.vcBidTarget = item.vcBidTarget;
            this.selectBondInfo();
            this.selectInstructionList();

        },
        // filedModelRes 字段设置成功后
        filedModelRes(){
            console.log("filedModelRes");
            this.initTable();
            this.selectInstructionList();
        },
        setCancel(){
            this.filedSettingModel = false;
        },

        // initTable 请求动态表头
        initTable(){
            var postData = {
                lPageId:this.pageId,
                lTableId:1,
                lIssueCnt:this.lIssueCnt,
                vcCode:this.selectTag
            }
            this.$httpPost('/link/selectLinkInfo',postData).then((res) => {
                res.data.forEach((tableHeader) => {
                    if(tableHeader.key == "cIsLocked"){
                        tableHeader.render = RenderIsLock;
                    }else if(tableHeader.key == "cWarnLevel"){
                        tableHeader.render = RenderWarnLevel;
                    }
                })
                this.columns.length = 1;
                this.columns = this.columns.concat(res.data)
            })
        },
        
        // 点击字段修改弹框确定
        fieldsSave(){
            this.$refs.setField.saveLinkOrder();
        },
         // filedModelRes 字段设置成功后
        filedModelRes(){
            console.log("filedModelRes");
            this.filedSettingModel = false;
            this.initTable();
            this.selectInstructionList();
        },
        // 右侧内容展开折叠
        collapsedSider () {
                console.log(this.isCollapsed)
                this.$refs.sider.toggleCollapse();
            },
        // 查询债券发行信息列表
        selectIssueInfo(){
            this.$httpGet('/secondary/selectSecondaryBonds').then((res) => {
                this.issueInfoList = [];
                this.$nextTick(() => {
                    this.issueInfoList = res.data;
                    if(this.issueInfoList.length > 0){
                        this.selectTag =  this.issueInfoList[0].id;
                        this.lIssueCnt = this.issueInfoList[0].lIssueCnt;
                        this.vcBidTarget = this.issueInfoList[0].vcBidTarget;
                        // 获取到当前选中的债券vcCode后请求债券信息，和指令列表
                        this.selectBondInfo();
                        this.initTable();
                        this.selectInstructionList();
                        this.selectBondDetailedInfo();
                    }else{
                        this.columns = [
                            {
                                type: 'selection',
                                width: 40,
                                align: 'left',
                                fixed: 'left'
                            }
                        ];
                        this.lAddCount = 0;
                        this.cBidPrice = null;
                        this.issueInfo = {};
                        this.InstructionData = [];
                        this.processData = [];
                    }
                })
            })
        },
        // 查询债券发行信息数据
        selectBondInfo(){
            this.$httpGet(`/inst/selectBondInfo?vcCode=${this.selectTag}&lIssueCnt=${this.lIssueCnt}`).then((res) => {
                this.lAddCount = this.issueInfo.lAddCount;
                this.cBidPrice = this.issueInfo.cBidPrice;
                this.issueInfo = res.data;
            })
        },
        
        // 查询指令信息列表
        selectInstructionList(){
            this.tableLoading = true;
            this.$httpGet(`/secondary/selectSecondarys?vcFundType1=${this.model1}&vcCode=${this.selectTag}&lIssueCnt=${this.lIssueCnt}&pageNum=${this.pageNum}&pageSize=${this.pageSize}&lPageId=${this.pageId}`).then((res) => {
                this.InstructionData = res.data.list;
                this.processData = [];
                this.totalSize = res.data.total;
                this.tableLoading = false;
                
            })
        },
        //页码改变时的回调
        pageNumChange (page){
            this.pageNum = page;
            this.selectInstructionList();
        },
        //每页数据条数改变时的回调
        pageSizeChange (pageSize){
            this.pageSize = pageSize;
            this.selectInstructionList();
        },
        //查询右侧债券发行信息详情组件数据
        selectBondDetailedInfo(){
            this.$httpGet(`/bondIssue/selectBondDetailedInfo?vcCode=${this.selectTag}&lIssueCnt=${this.lIssueCnt}`)
                .then((res) => {            
                    if(res.status===200 && res.data){
                        this.bondDetail=res.data;
                    }                
                })
        },
        // 指令表表格多选框改变
        selectChange(selection){
            this.selectInstruc = selection;
        },
        //显示流程详细流程图
        showProcessDetail(){
            ipcRenderer.send('showProcessDetail',this.instrucId)
        },

        // 请求标位数据
        /* selectBits(){
            this.$httpGet(`/inst/selectBits?id=${this.instrucId}`).then((res) => {
                this.bitData = res.data
            })
        }, */
        // 请求历史流程数据
        selectProcessHisList(){
            if(this.instrucId){
                    this.processTableLoading = true;
                    this.$httpGet(`/process/selectProcessHisList?id=${this.instrucId}&processDefinitionKey=Process_Decision_Bond_Change`).then((res) => {
                    this.processData = res.data
                    this.processTableLoading = false;
                })
            }else{
                this.processData = [];
            }
            
        },

        // 指令表的高亮行改变时触发
        insRowChange(currentRow,oldCurrentRow){
            this.instrucId = currentRow.lChangeId;
            this.selectProcessHisList();
            
        },
        //提交指令
        submitHandle(){
            if(this.selectInstruc.length > 0){
                var submitList = [];
                for (var index = 0; index < this.selectInstruc.length; index++) {
                    var element = this.selectInstruc[index];
                    console.log(element)
                    if(element.id == null){
                        this.$Message.warning("提交失败，选中项中存在未生效的指令！");
                        return false;
                    }else if(element.vcTaskName !== '未更改' && element.vcTaskName !=='账户已更改'){
                        this.$Message.warning("存在指令已进入修改账户流程！");
                        return false;
                    }else{
                        submitList.push({instId:element.id,taskId:element.vcTaskId});
                    }
                }
                this.$httpPost('/secondary/submitSecondary',submitList).then((res) => {
                    if(res.data.actionResult != 0){
                        this.$Message.success('指令提交成功！')
                        this.refresh();
                        // this.selectInstructionList();
                    }else{
                        this.$Message.error('提交失败！')
                    }
                    
                })
            }else{
                this.$Message.warning('请选择要提交的指令！')
            }
        },
        /* 修改账户 */
        editAcountHandle(){
            if(this.selectInstruc.length == 0){
                this.$Message.warning('请选择单条指令！');
            }else if(this.selectInstruc.length > 1){
                this.$Message.warning('只能选择单条指令！');
            }else if(this.selectInstruc[0].vcTaskName !== '未更改' && this.selectInstruc[0].vcTaskName !=='账户已更改'){
                this.$Message.warning('当前指令已发起修改账户流程！');
            }else{
                this.$httpGet('/bondChange/selectBondChange',{lStockId:this.selectInstruc[0].id}).then((res) => {
                    this.bondInfo = res.data;
                    this.editAccountModel = true;
                })
            }
        },
        editAccountOk(){
            this.$refs.editAccount.submitEditForm();
        },
        // 提交成功取消loading 关闭modal
        submitSucess(data){
            this.editAcountLoading = false;
            this.selectInstruc[0].lChangeId = data.id;
            this.selectInstruc[0].vcTaskName = data.vcName;
            this.InstructionData.forEach((item) => {
                if(item.lCombiId == this.selectInstruc[0].lCombiId){
                    item.lChangeId = data.id;
                    item.vcTaskName = data.vcName;
                    item._checked = true;
                   
                }
            })
            this.$nextTick(() => {
                this.editAcountLoading = true;
            })
            this.editAccountModel = false;
        },
        submitError(){
            this.editAcountLoading = false;
            this.$nextTick(() => {
                this.editAcountLoading = true;
            })
            // this.editAccountModel = false;
        },
        // 删除指令
        deleteHandle(){
             if(this.selectInstruc.length > 0){
                this.$Modal.confirm({
                    title: '提示',
                    content: '<p>是否删除选中的指令？</p>',
                    // loading: true,
                    onOk: () => {
                        var deleteList = [];
                        for (var index = 0; index < this.selectInstruc.length; index++) {
                            var element = this.selectInstruc[index];
                            if(element.id == null){
                                this.$Message.warning("删除失败，选中项中存在未生效的指令！");
                                return false;
                            }else{
                                deleteList.push(element.id);
                            }
                        }
                        this.$httpPost('/secondary/deleteInstructions',deleteList).then((res) => {
                            this.$Modal.remove();
                            this.$Message.success('删除成功');
                            this.selectInstructionList();
                        })
                    },
                    onCancel: () => {
                        console.log("取消删除操作")
                    }
                });
                
            }else{
                this.$Message.warning('请选择要删除的指令！')
            }
        },
    },
     mounted(){
         this.$nextTick(() => {
               this.tableHeight=this.$refs.tableWrap.getBoundingClientRect().height;
                this.processTableHeight=this.$refs.processTableWrap.getBoundingClientRect().height;
            })
        window.addEventListener('resize', () => {//动态调整高度
            this.tableHeight=this.$refs.tableWrap.getBoundingClientRect().height;
            this.processTableHeight=this.$refs.processTableWrap.getBoundingClientRect().height;
        })
        
    },
    components:{
        FieldSetting,
        BondLowDetail,
        BondTag,
        BondDetail,
        Refresh,
        EditAccount
    }
   
  }
</script>

<style scoped>
   

   #bond-tend{
        width: 100%;
        height: 100%;
   }
  .tag-wrapper{
        height: 30px;
        overflow:hidden;
    }
  
   .tagChildren{
        width: 20px;
        height: 30px;
        float:left;
        line-height:30px;
        text-align: center;
        background:#666;
   }
   .table-wrapper{
        height: calc(100% - 151px);
   }   
   .sider{
       padding-left:8px;
       position: relative;
   }  
   .process-table-wrapper{
        height: calc(100vh - 140px);
   } 

   /*.sider .ivu-layout-sider-children{*/
    /*//    background-color:  rgba(66,66,66,0);*/
   /*}*/
    /*.show-hide-side-bt{
        cursor:pointer;
        display: inline-block;
        width: 8px;
        height: 80px;
        border-radius: 0 4px 4px 0;
        background: #666;
        position: absolute;
        right: 0;
        top: calc(50% - 50px);
        text-align: center;
        line-height: 75px;
        
    }*/
   
    
    
</style>
